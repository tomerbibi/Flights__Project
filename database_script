--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1
-- Dumped by pg_dump version 13.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: add_administrator(text, text, integer, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_administrator(first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into administrators(first_name, last_name, level, user_id) VALUES (first_name_func, last_name_func, level_func, user_id_func);

	    end;

	    $$;


ALTER PROCEDURE public.add_administrator(first_name_func text, last_name_func text, level_func integer, user_id_func bigint) OWNER TO postgres;

--
-- Name: add_airline(text, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_airline(name_func text, country_id_func bigint, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into airline_companies(name, country_id, user_id) VALUES (name_func, country_id_func, user_id_func);

	    end;

	    $$;


ALTER PROCEDURE public.add_airline(name_func text, country_id_func bigint, user_id_func bigint) OWNER TO postgres;

--
-- Name: add_airline_to_auth(text, bigint, text, text, text); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_airline_to_auth(name_func text, country_id_func bigint, username_func text, password_func text, email_func text)
    LANGUAGE plpgsql
    AS $$
begin

	insert into authorize_airlines(name, country_id, username, password, email)
	 VALUES (name_func, country_id_func, username_func, password_func, email_func);

	    end;


$$;


ALTER PROCEDURE public.add_airline_to_auth(name_func text, country_id_func bigint, username_func text, password_func text, email_func text) OWNER TO postgres;

--
-- Name: add_country(text); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_country(name text)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into countries(name) values (name);

	    end;

	    $$;


ALTER PROCEDURE public.add_country(name text) OWNER TO postgres;

--
-- Name: add_customer(text, text, text, text, text, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_customer(first_name_func text, last_name_func text, adress_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into customers(first_name, last_name, address, phone_no, credit_card_no, user_id) values

	(first_name_func, last_name_func, adress_func, phone_no_func, credit_card_no_func, user_id_func);

	    end;

	    $$;


ALTER PROCEDURE public.add_customer(first_name_func text, last_name_func text, adress_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint) OWNER TO postgres;

--
-- Name: add_flight(bigint, integer, integer, timestamp without time zone, timestamp without time zone, integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_flight(airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
    LANGUAGE plpgsql
    AS $$
begin

	insert into flights(airline_company_id, origin_country_id, destination_country_id, departure_time, landing_time,

	remaining_tickets) values (airline_company_id_func, origin_country_id_func, destination_country_id_func,

	departure_time_func, landing_time_func, remaining_tickets_func);

	for i in 1..remaining_tickets_func LOOP
   insert into flights_project.public.tickets(flight_id, customer_id) VALUES ((SELECT max(id) from flights_project.public.flights),0);
   end loop;

	    end;
$$;


ALTER PROCEDURE public.add_flight(airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer) OWNER TO postgres;

--
-- Name: add_ticket(bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_ticket(flight_id_func bigint, customer_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into tickets(flight_id, customer_id) VALUES (flight_id_func, customer_id_func);

	    end;

	    $$;


ALTER PROCEDURE public.add_ticket(flight_id_func bigint, customer_id_func bigint) OWNER TO postgres;

--
-- Name: add_user(text, text, text, integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_user(username_func text, password_func text, email_func text, role_id_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	insert into users(username, password, email, role_id) VALUES (username_func, password_func, email_func, role_id_func);

	    end;

	    $$;


ALTER PROCEDURE public.add_user(username_func text, password_func text, email_func text, role_id_func integer) OWNER TO postgres;

--
-- Name: get_administrator(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_administrator(id_from_user integer) RETURNS TABLE(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from administrators where id = id_from_user;

	    end;

	    $$;


ALTER FUNCTION public.get_administrator(id_from_user integer) OWNER TO postgres;

--
-- Name: get_airline(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_airline(id_from_user bigint) RETURNS TABLE(id_1 bigint, name_1 text, country_id_1 integer, user_id_1 bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        return query

	        select * from airline_companies where id = id_from_user;

	    end;


$$;


ALTER FUNCTION public.get_airline(id_from_user bigint) OWNER TO postgres;

--
-- Name: get_airline_by_username(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_airline_by_username(name_func text) RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	

	        return query

	        select * from airline_companies where airline_companies.name = name_func;

	

	    end;

	    $$;


ALTER FUNCTION public.get_airline_by_username(name_func text) OWNER TO postgres;

--
-- Name: get_all_administrators(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_administrators() RETURNS TABLE(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from administrators;

	    end;

	    $$;


ALTER FUNCTION public.get_all_administrators() OWNER TO postgres;

--
-- Name: get_all_airline_auth(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_airline_auth() RETURNS TABLE(id_ bigint, name_ text, country_id_ integer, username text, password_ text, email text)
    LANGUAGE plpgsql
    AS $$
begin

	        return query

	        select * from authorize_airlines;

	    end;


$$;


ALTER FUNCTION public.get_all_airline_auth() OWNER TO postgres;

--
-- Name: get_all_airline_companies(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_airline_companies() RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        return query

	        select * from airline_companies;

	    end;


$$;


ALTER FUNCTION public.get_all_airline_companies() OWNER TO postgres;

--
-- Name: get_all_airlines_by_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_airlines_by_country(country_id_func integer) RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	

	        return query

	        select * from airline_companies where airline_companies.country_id = country_id_func;

	

	    end;

	    $$;


ALTER FUNCTION public.get_all_airlines_by_country(country_id_func integer) OWNER TO postgres;

--
-- Name: get_all_countries(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_countries() RETURNS TABLE(returned_id integer, returned_text text)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from countries;

	    end;

	    $$;


ALTER FUNCTION public.get_all_countries() OWNER TO postgres;

--
-- Name: get_all_customers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_customers() RETURNS TABLE(id bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from customers;

	    end;

	    $$;


ALTER FUNCTION public.get_all_customers() OWNER TO postgres;

--
-- Name: get_all_flights(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_flights() RETURNS TABLE(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from flights;

	    end;

	    $$;


ALTER FUNCTION public.get_all_flights() OWNER TO postgres;

--
-- Name: get_all_tickets(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_tickets() RETURNS TABLE(id bigint, flight_id bigint, customer_id bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from tickets;

	    end;

	    $$;


ALTER FUNCTION public.get_all_tickets() OWNER TO postgres;

--
-- Name: get_all_users(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_all_users() RETURNS TABLE(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from users;

	    end;

	    $$;


ALTER FUNCTION public.get_all_users() OWNER TO postgres;

--
-- Name: get_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_country(id_from_user integer) RETURNS TABLE(returned_id integer, returned_text text)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from countries where id = id_from_user;

	    end;

	    $$;


ALTER FUNCTION public.get_country(id_from_user integer) OWNER TO postgres;

--
-- Name: get_customer(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_customer(id_from_user bigint) RETURNS TABLE(id_1 bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id_1 bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        return query

	        select * from customers where id = id_from_user;

	    end;


$$;


ALTER FUNCTION public.get_customer(id_from_user bigint) OWNER TO postgres;

--
-- Name: get_customer_by_username(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_customer_by_username(username_func text) RETURNS TABLE(id bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	

	        return query

	        select * from customers where user_id = (select users.id from users where users.username = username_func);

	

	    end;

	    $$;


ALTER FUNCTION public.get_customer_by_username(username_func text) OWNER TO postgres;

--
-- Name: get_flight(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_flight(id_from_user bigint) RETURNS TABLE(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from flights where id = id_from_user;

	    end;

	    $$;


ALTER FUNCTION public.get_flight(id_from_user bigint) OWNER TO postgres;

--
-- Name: get_flights_by_departure_date(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_flights_by_departure_date(departure_date_func timestamp without time zone) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time_1 timestamp without time zone, landing_time_1 timestamp without time zone, remaining_tickets integer)
    LANGUAGE plpgsql
    AS $$
begin

	

	        return query

	        select * from flights where departure_time::date = departure_date_func::date;

	

	    end;


$$;


ALTER FUNCTION public.get_flights_by_departure_date(departure_date_func timestamp without time zone) OWNER TO postgres;

--
-- Name: get_flights_by_destination_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_flights_by_destination_country(destination_country_func integer) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id_1 integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
    LANGUAGE plpgsql
    AS $$
begin

	

	        return query

	        select * from flights where destination_country_id = destination_country_func;

	

	    end;


$$;


ALTER FUNCTION public.get_flights_by_destination_country(destination_country_func integer) OWNER TO postgres;

--
-- Name: get_flights_by_landing_date(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_flights_by_landing_date(landing_date_func timestamp without time zone) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time_1 timestamp without time zone, landing_time_1 timestamp without time zone, remaining_tickets integer)
    LANGUAGE plpgsql
    AS $$
begin

	

	        return query

	        select * from flights where landing_time::date = landing_date_func::date;

	

	    end;


$$;


ALTER FUNCTION public.get_flights_by_landing_date(landing_date_func timestamp without time zone) OWNER TO postgres;

--
-- Name: get_flights_by_origin_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_flights_by_origin_country(origin_country_func integer) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	

	        return query

	        select * from flights where origin_country_id = origin_country_func;

	

	    end;

	    $$;


ALTER FUNCTION public.get_flights_by_origin_country(origin_country_func integer) OWNER TO postgres;

--
-- Name: get_ticket(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_ticket(id_from_user bigint) RETURNS TABLE(func_id bigint, flight_id bigint, customer_id bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        return query

	        select * from tickets where id = id_from_user;

	    end;


$$;


ALTER FUNCTION public.get_ticket(id_from_user bigint) OWNER TO postgres;

--
-- Name: get_user(bigint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user(id_from_user bigint) RETURNS TABLE(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        return query

	        select * from users where id = id_from_user;

	    end;

	    $$;


ALTER FUNCTION public.get_user(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_administrator(integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_administrator(id_from_user integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from administrators where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_administrator(id_from_user integer) OWNER TO postgres;

--
-- Name: remove_airline(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_airline(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from airline_companies where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_airline(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_airline_auth(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_airline_auth(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        delete from authorize_airlines where id = id_from_user;

	    end;


$$;


ALTER PROCEDURE public.remove_airline_auth(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_country(integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_country(id_from_user integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from countries where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_country(id_from_user integer) OWNER TO postgres;

--
-- Name: remove_customer(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_customer(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from customers where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_customer(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_flight(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_flight(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$
begin

	        delete from flights where id = id_from_user;
	        delete  from tickets where  tickets.flight_id = id_from_user;

	    end;


$$;


ALTER PROCEDURE public.remove_flight(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_ticket(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_ticket(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from tickets where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_ticket(id_from_user bigint) OWNER TO postgres;

--
-- Name: remove_user(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.remove_user(id_from_user bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        delete from users where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.remove_user(id_from_user bigint) OWNER TO postgres;

--
-- Name: update_administrator(integer, text, text, integer, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_administrator(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update administrators set first_name = first_name_func, last_name = last_name_func, level = level_func, user_id = user_id_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_administrator(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint) OWNER TO postgres;

--
-- Name: update_airline(bigint, text, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_airline(id_func bigint, name_func text, country_id_func bigint, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update airline_companies set name = name_func, country_id = country_id_func,

	        user_id = user_id_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_airline(id_func bigint, name_func text, country_id_func bigint, user_id_func bigint) OWNER TO postgres;

--
-- Name: update_country(integer, text); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_country(id_from_user integer, name_from_user text)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update countries set name = name_from_user where id = id_from_user;

	    end;

	    $$;


ALTER PROCEDURE public.update_country(id_from_user integer, name_from_user text) OWNER TO postgres;

--
-- Name: update_customer(bigint, text, text, text, text, text, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_customer(id_func bigint, first_name_func text, last_name_func text, address_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update customers set first_name = first_name_func, last_name = last_name_func,

	        address = address_func, phone_no = phone_no_func, credit_card_no = credit_card_no_func,

	        user_id = user_id_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_customer(id_func bigint, first_name_func text, last_name_func text, address_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint) OWNER TO postgres;

--
-- Name: update_flight(bigint, bigint, integer, integer, timestamp without time zone, timestamp without time zone, integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_flight(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update flights set airline_company_id = airline_company_id_func, origin_country_id = origin_country_id_func,

	        destination_country_id = destination_country_id_func, departure_time = departure_time_func,

	        landing_time = landing_time_func, remaining_tickets = remaining_tickets_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_flight(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer) OWNER TO postgres;

--
-- Name: update_ticket(bigint, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_ticket(id_func bigint, flight_id_func bigint, customer_id_func bigint)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update tickets set flight_id = flight_id_func, customer_id = customer_id_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_ticket(id_func bigint, flight_id_func bigint, customer_id_func bigint) OWNER TO postgres;

--
-- Name: update_user(bigint, text, text, text, integer); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.update_user(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
    LANGUAGE plpgsql
    AS $$

	    begin

	        update users set username = username_func, password = password_func, email = email_func,

	        role_id = role_id_func where id = id_func;

	    end;

	    $$;


ALTER PROCEDURE public.update_user(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: administrators; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.administrators (
    id integer NOT NULL,
    first_name text,
    last_name text,
    level integer,
    user_id bigint
);


ALTER TABLE public.administrators OWNER TO postgres;

--
-- Name: administrator_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.administrator_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.administrator_id_seq OWNER TO postgres;

--
-- Name: administrator_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.administrator_id_seq OWNED BY public.administrators.id;


--
-- Name: airline_companies; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.airline_companies (
    id bigint NOT NULL,
    name text,
    country_id integer,
    user_id bigint
);


ALTER TABLE public.airline_companies OWNER TO postgres;

--
-- Name: airline_companies_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.airline_companies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.airline_companies_id_seq OWNER TO postgres;

--
-- Name: airline_companies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.airline_companies_id_seq OWNED BY public.airline_companies.id;


--
-- Name: authorize_airlines; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.authorize_airlines (
    id bigint NOT NULL,
    name text,
    country_id integer,
    username text,
    password text,
    email text
);


ALTER TABLE public.authorize_airlines OWNER TO postgres;

--
-- Name: authorize_airlines_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.authorize_airlines_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.authorize_airlines_id_seq OWNER TO postgres;

--
-- Name: authorize_airlines_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.authorize_airlines_id_seq OWNED BY public.authorize_airlines.id;


--
-- Name: countries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.countries (
    id integer NOT NULL,
    name text
);


ALTER TABLE public.countries OWNER TO postgres;

--
-- Name: countries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.countries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.countries_id_seq OWNER TO postgres;

--
-- Name: countries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.countries_id_seq OWNED BY public.countries.id;


--
-- Name: customers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.customers (
    id bigint NOT NULL,
    first_name text,
    last_name text,
    address text,
    phone_no text,
    credit_card_no text,
    user_id bigint
);


ALTER TABLE public.customers OWNER TO postgres;

--
-- Name: customer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.customer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.customer_id_seq OWNER TO postgres;

--
-- Name: customer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.customer_id_seq OWNED BY public.customers.id;


--
-- Name: flights; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.flights (
    id bigint NOT NULL,
    airline_company_id bigint,
    origin_country_id integer,
    destination_country_id integer,
    departure_time timestamp without time zone,
    landing_time timestamp without time zone,
    remaining_tickets integer
);


ALTER TABLE public.flights OWNER TO postgres;

--
-- Name: flights_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.flights_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.flights_id_seq OWNER TO postgres;

--
-- Name: flights_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.flights_id_seq OWNED BY public.flights.id;


--
-- Name: tickets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tickets (
    id bigint NOT NULL,
    flight_id bigint,
    customer_id bigint
);


ALTER TABLE public.tickets OWNER TO postgres;

--
-- Name: ticket_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.ticket_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.ticket_id_seq OWNER TO postgres;

--
-- Name: ticket_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.ticket_id_seq OWNED BY public.tickets.id;


--
-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_roles (
    id integer NOT NULL,
    role_name text
);


ALTER TABLE public.user_roles OWNER TO postgres;

--
-- Name: user_roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_roles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_roles_id_seq OWNER TO postgres;

--
-- Name: user_roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_roles_id_seq OWNED BY public.user_roles.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id bigint NOT NULL,
    username text,
    password text,
    email text,
    role_id integer
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: administrators id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.administrators ALTER COLUMN id SET DEFAULT nextval('public.administrator_id_seq'::regclass);


--
-- Name: airline_companies id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.airline_companies ALTER COLUMN id SET DEFAULT nextval('public.airline_companies_id_seq'::regclass);


--
-- Name: authorize_airlines id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.authorize_airlines ALTER COLUMN id SET DEFAULT nextval('public.authorize_airlines_id_seq'::regclass);


--
-- Name: countries id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.countries ALTER COLUMN id SET DEFAULT nextval('public.countries_id_seq'::regclass);


--
-- Name: customers id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.customers ALTER COLUMN id SET DEFAULT nextval('public.customer_id_seq'::regclass);


--
-- Name: flights id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.flights ALTER COLUMN id SET DEFAULT nextval('public.flights_id_seq'::regclass);


--
-- Name: tickets id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets ALTER COLUMN id SET DEFAULT nextval('public.ticket_id_seq'::regclass);


--
-- Name: user_roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles ALTER COLUMN id SET DEFAULT nextval('public.user_roles_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: administrators; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.administrators (id, first_name, last_name, level, user_id) FROM stdin;
17	tomer	bibi	3	10
18	tomer	bibi	3	10
19	tomer	bibi	3	10
20	tomer	bibi	3	5
21	tomer	bibi	3	5
22	tomer	bibi	3	5
23	tomer	bibi	3	5
24	jock	martin	3	11
\.


--
-- Data for Name: airline_companies; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.airline_companies (id, name, country_id, user_id) FROM stdin;
8	vigor	1	22
5	company5	2	21
6	vigor	1	22
7	vigor	1	22
1	elal	1	12
\.


--
-- Data for Name: authorize_airlines; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.authorize_airlines (id, name, country_id, username, password, email) FROM stdin;
5	leo	1	erthre	weftjr	pievf@gmail.com
6	Tomer	1	erger	ytjytj	tomerbibi2002@gmail.com
7	Tomer	1	erger	hj,yu	tomerbibi2002@gmail.com
8	Tomer	1	thrt	trjrt	tomerbibi2002@gmail.com
\.


--
-- Data for Name: countries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.countries (id, name) FROM stdin;
1	japan
2	brazil
\.


--
-- Data for Name: customers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.customers (id, first_name, last_name, address, phone_no, credit_card_no, user_id) FROM stdin;
6	ytj	tyjty	tyjty	5475	trhnd	25
5	lucas	triton	lucass	854634224	83467345	17
2	lucifer	morningstar	hell	05324252	9834982424	10
1	cust	omer	there	09120491234	7345473453	11
4	cust	omer	there	092352348	23562342555	16
\.


--
-- Data for Name: flights; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.flights (id, airline_company_id, origin_country_id, destination_country_id, departure_time, landing_time, remaining_tickets) FROM stdin;
7	1	1	2	2021-08-22 19:22:21	2021-08-23 19:22:21	5
8	1	1	2	2021-08-22 19:22:21	2021-08-23 19:22:21	12
15	1	2	1	2021-08-28 00:00:00	2021-08-29 00:00:00	3
19	1	1	1	2021-09-25 00:00:00	2021-09-27 00:00:00	38
20	1	1	1	2021-09-25 00:00:00	2021-09-25 00:00:00	25
21	1	1	1	2021-09-28 00:00:00	2021-09-28 00:00:00	7
29	1	1	1	2021-09-29 00:00:00	2021-09-29 00:00:00	8
30	1	1	1	2021-09-30 00:00:00	2021-09-30 00:00:00	3
31	1	1	1	2021-10-02 00:00:00	2021-10-04 00:00:00	62
32	1	1	1	2021-10-07 00:00:00	2021-10-08 00:00:00	36
35	1	1	1	2021-10-23 00:00:00	2021-10-24 00:00:00	46
\.


--
-- Data for Name: tickets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tickets (id, flight_id, customer_id) FROM stdin;
151	29	0
152	29	0
153	29	0
22	15	0
21	15	0
25	19	0
26	19	0
27	19	0
28	19	0
29	19	0
30	19	0
31	19	0
32	19	0
33	19	0
34	19	0
35	19	0
36	19	0
37	19	0
38	19	0
39	19	0
40	19	0
41	19	0
42	19	0
43	19	0
44	19	0
45	19	0
46	19	0
47	19	0
48	19	0
49	19	0
50	19	0
1	7	1
2	8	1
3	7	1
4	7	1
5	7	1
7	7	1
6	7	1
8	7	1
9	7	1
51	19	0
52	19	0
53	19	0
54	19	0
55	19	0
56	19	0
57	19	0
58	19	0
59	19	0
60	19	0
61	19	0
62	19	0
24	7	0
23	7	1
154	29	0
63	20	0
64	20	0
65	20	0
66	20	0
67	20	0
68	20	0
69	20	0
70	20	0
71	20	0
72	20	0
73	20	0
74	20	0
75	20	0
76	20	0
77	20	0
78	20	0
79	20	0
80	20	0
81	20	0
82	20	0
83	20	0
84	20	0
85	20	0
86	20	0
87	20	0
88	21	0
89	21	0
90	21	0
91	21	0
92	21	0
93	21	0
94	21	0
155	29	0
156	29	0
157	29	0
158	29	0
159	30	0
160	30	0
161	30	0
162	31	0
163	31	0
164	31	0
165	31	0
166	31	0
167	31	0
168	31	0
169	31	0
170	31	0
171	31	0
172	31	0
173	31	0
174	31	0
175	31	0
176	31	0
177	31	0
178	31	0
179	31	0
180	31	0
181	31	0
182	31	0
183	31	0
184	31	0
185	31	0
186	31	0
187	31	0
188	31	0
189	31	0
190	31	0
191	31	0
192	31	0
193	31	0
194	31	0
195	31	0
196	31	0
197	31	0
198	31	0
199	31	0
200	31	0
201	31	0
202	31	0
203	31	0
204	31	0
205	31	0
206	31	0
207	31	0
208	31	0
209	31	0
210	31	0
211	31	0
212	31	0
213	31	0
214	31	0
215	31	0
216	31	0
217	31	0
218	31	0
219	31	0
220	31	0
221	31	0
222	31	0
223	31	0
224	32	0
225	32	0
226	32	0
227	32	0
228	32	0
229	32	0
230	32	0
231	32	0
232	32	0
233	32	0
234	32	0
235	32	0
236	32	0
237	32	0
238	32	0
239	32	0
240	32	0
241	32	0
242	32	0
243	32	0
244	32	0
245	32	0
246	32	0
247	32	0
248	32	0
249	32	0
250	32	0
251	32	0
252	32	0
253	32	0
254	32	0
255	32	0
256	32	0
257	32	0
258	32	0
259	32	0
350	35	0
351	35	0
352	35	0
353	35	0
354	35	0
355	35	0
356	35	0
357	35	0
358	35	0
359	35	0
360	35	0
361	35	0
362	35	0
363	35	0
364	35	0
365	35	0
366	35	0
367	35	0
368	35	0
369	35	0
370	35	0
371	35	0
372	35	0
373	35	0
374	35	0
375	35	0
376	35	0
377	35	0
378	35	0
379	35	0
380	35	0
381	35	0
382	35	0
383	35	0
384	35	0
385	35	0
386	35	0
387	35	0
388	35	0
389	35	0
390	35	0
391	35	0
392	35	0
393	35	0
348	35	0
349	35	1
\.


--
-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_roles (id, role_name) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, username, password, email, role_id) FROM stdin;
10	tomer	bibi	tomerbibi2002@gmail.com	1
13	erger	bob902	egr@gmail.com	3
14	chloe1991	decker	chloe@gmail.com	3
15	john	546bsdv	john@gmail.com	3
16	pro	customer	customer@gmail.com	3
18	compun	comppas	comp@gmail.com	3
19	jr45hj	another	airline@gmail.com	3
20	jr45hj	pass	airline@gmail.com	3
21	airline	company	airline@gmail.com	3
17	norm	norm	luc@gmail.com	3
22	psamanth	giana	fran@gmail.com	2
23	psamanth	giana	fran@gmail.com	2
24	psamanth	giana	fran@gmail.com	2
25	thdrt	rth	tomerbibi2002@gmail.com	3
11	cust	123	cust@gmail.com	3
12	air	123	mail	2
\.


--
-- Name: administrator_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.administrator_id_seq', 25, true);


--
-- Name: airline_companies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.airline_companies_id_seq', 8, true);


--
-- Name: authorize_airlines_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.authorize_airlines_id_seq', 8, true);


--
-- Name: countries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.countries_id_seq', 2, true);


--
-- Name: customer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.customer_id_seq', 6, true);


--
-- Name: flights_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.flights_id_seq', 36, true);


--
-- Name: ticket_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ticket_id_seq', 418, true);


--
-- Name: user_roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_roles_id_seq', 1, false);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 25, true);


--
-- PostgreSQL database dump complete
--

