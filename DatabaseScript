--
	-- PostgreSQL database dump
	--
	

	-- Dumped from database version 13.1
	-- Dumped by pg_dump version 13.1
	

	SET statement_timeout = 0;
	SET lock_timeout = 0;
	SET idle_in_transaction_session_timeout = 0;
	SET client_encoding = 'UTF8';
	SET standard_conforming_strings = on;
	SELECT pg_catalog.set_config('search_path', '', false);
	SET check_function_bodies = false;
	SET xmloption = content;
	SET client_min_messages = warning;
	SET row_security = off;
	

	--
	-- Name: add_administrator(text, text, integer, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_administrator(first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into administrators(first_name, last_name, level, user_id) VALUES (first_name_func, last_name_func, level_func, user_id_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_administrator(first_name_func text, last_name_func text, level_func integer, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: add_airline(text, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_airline(name_func text, country_id_func bigint, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into airline_companies(name, country_id, user_id) VALUES (name_func, country_id_func, user_id_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_airline(name_func text, country_id_func bigint, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: add_country(text); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_country(name text)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into countries(name) values (name);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_country(name text) OWNER TO postgres;
	

	--
	-- Name: add_customer(text, text, text, text, text, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_customer(first_name_func text, last_name_func text, adress_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into customers(first_name, last_name, address, phone_no, credit_card_no, user_id) values

	(first_name_func, last_name_func, adress_func, phone_no_func, credit_card_no_func, user_id_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_customer(first_name_func text, last_name_func text, adress_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: add_flight(bigint, integer, integer, timestamp without time zone, timestamp without time zone, integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_flight(airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into flights(airline_company_id, origin_country_id, destination_country_id, departure_time, landing_time,

	remaining_tickets) values (airline_company_id_func, origin_country_id_func, destination_country_id_func,

	departure_time_func, landing_time_func, remaining_tickets_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_flight(airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer) OWNER TO postgres;
	

	--
	-- Name: add_ticket(bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_ticket(flight_id_func bigint, customer_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into tickets(flight_id, customer_id) VALUES (flight_id_func, customer_id_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_ticket(flight_id_func bigint, customer_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: add_user(text, text, text, integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.add_user(username_func text, password_func text, email_func text, role_id_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	insert into users(username, password, email, role_id) VALUES (username_func, password_func, email_func, role_id_func);

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.add_user(username_func text, password_func text, email_func text, role_id_func integer) OWNER TO postgres;
	

	--
	-- Name: get_administrator(integer); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_administrator(id_from_user integer) RETURNS TABLE(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from administrators where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_administrator(id_from_user integer) OWNER TO postgres;
	

	--
	-- Name: get_airline(bigint); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_airline(id_from_user bigint) RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from airline_companies where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_airline(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: get_airline_by_username(text); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_airline_by_username(name_func text) RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from airline_companies where airline_companies.name = name_func;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_airline_by_username(name_func text) OWNER TO postgres;
	

	--
	-- Name: get_all_administrators(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_administrators() RETURNS TABLE(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from administrators;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_administrators() OWNER TO postgres;
	

	--
	-- Name: get_all_airline_companies(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_airline_companies() RETURNS TABLE(id bigint, name text, country_id bigint, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from airline_companies;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_airline_companies() OWNER TO postgres;
	

	--
	-- Name: get_all_airlines_by_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_airlines_by_country(country_id_func integer) RETURNS TABLE(id bigint, name text, country_id integer, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from airline_companies where airline_companies.country_id = country_id_func;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_airlines_by_country(country_id_func integer) OWNER TO postgres;
	

	--
	-- Name: get_all_countries(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_countries() RETURNS TABLE(returned_id integer, returned_text text)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from countries;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_countries() OWNER TO postgres;
	

	--
	-- Name: get_all_customers(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_customers() RETURNS TABLE(id bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from customers;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_customers() OWNER TO postgres;
	

	--
	-- Name: get_all_flights(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_flights() RETURNS TABLE(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from flights;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_flights() OWNER TO postgres;
	

	--
	-- Name: get_all_tickets(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_tickets() RETURNS TABLE(id bigint, flight_id bigint, customer_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from tickets;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_tickets() OWNER TO postgres;
	

	--
	-- Name: get_all_users(); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_all_users() RETURNS TABLE(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from users;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_all_users() OWNER TO postgres;
	

	--
	-- Name: get_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_country(id_from_user integer) RETURNS TABLE(returned_id integer, returned_text text)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from countries where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_country(id_from_user integer) OWNER TO postgres;
	

	--
	-- Name: get_customer(bigint); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_customer(id_from_user bigint) RETURNS TABLE(id bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from customers where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_customer(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: get_customer_by_username(text); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_customer_by_username(username_func text) RETURNS TABLE(id bigint, first_name text, last_name text, address text, phone_no text, credit_card_no text, user_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from customers where user_id = (select users.id from users where users.username = username_func);

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_customer_by_username(username_func text) OWNER TO postgres;
	

	--
	-- Name: get_flight(bigint); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_flight(id_from_user bigint) RETURNS TABLE(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from flights where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_flight(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: get_flights_by_departure_date(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_flights_by_departure_date(departure_date_func timestamp without time zone) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from flights where departure_time::date = departure_date_func::date;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_flights_by_departure_date(departure_date_func timestamp without time zone) OWNER TO postgres;
	

	--
	-- Name: get_flights_by_destination_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_flights_by_destination_country(destination_country_func integer) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from flights where destination_country_id = destination_country_func;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_flights_by_destination_country(destination_country_func integer) OWNER TO postgres;
	

	--
	-- Name: get_flights_by_landing_date(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_flights_by_landing_date(landing_date_func timestamp without time zone) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from flights where landing_time::date = landing_date_func::date;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_flights_by_landing_date(landing_date_func timestamp without time zone) OWNER TO postgres;
	

	--
	-- Name: get_flights_by_origin_country(integer); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_flights_by_origin_country(origin_country_func integer) RETURNS TABLE(id bigint, airline_company_id bigint, origin_company_id integer, destination_country_id integer, departure_time timestamp without time zone, landing_time timestamp without time zone, remaining_tickets integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	

	        return query

	        select * from flights where origin_country_id = origin_country_func;

	

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_flights_by_origin_country(origin_country_func integer) OWNER TO postgres;
	

	--
	-- Name: get_ticket(bigint); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_ticket(id_from_user bigint) RETURNS TABLE(id bigint, flight_id bigint, customer_id bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from tickets where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_ticket(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: get_user(bigint); Type: FUNCTION; Schema: public; Owner: postgres
	--
	

	CREATE FUNCTION public.get_user(id_from_user bigint) RETURNS TABLE(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        return query

	        select * from users where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER FUNCTION public.get_user(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: remove_administrator(integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_administrator(id_from_user integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from administrators where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_administrator(id_from_user integer) OWNER TO postgres;
	

	--
	-- Name: remove_airline(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_airline(id_from_user bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from airline_companies where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_airline(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: remove_country(integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_country(id_from_user integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from countries where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_country(id_from_user integer) OWNER TO postgres;
	

	--
	-- Name: remove_customer(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_customer(id_from_user bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from customers where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_customer(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: remove_flight(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_flight(id_from_user bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from flights where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_flight(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: remove_ticket(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_ticket(id_from_user bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from tickets where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_ticket(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: remove_user(bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.remove_user(id_from_user bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        delete from users where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.remove_user(id_from_user bigint) OWNER TO postgres;
	

	--
	-- Name: update_administrator(integer, text, text, integer, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_administrator(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update administrators set first_name = first_name_func, last_name = last_name_func, level = level_func, user_id = user_id_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_administrator(id_func integer, first_name_func text, last_name_func text, level_func integer, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: update_airline(bigint, text, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_airline(id_func bigint, name_func text, country_id_func bigint, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update airline_companies set name = name_func, country_id = country_id_func,

	        user_id = user_id_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_airline(id_func bigint, name_func text, country_id_func bigint, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: update_country(integer, text); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_country(id_from_user integer, name_from_user text)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update countries set name = name_from_user where id = id_from_user;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_country(id_from_user integer, name_from_user text) OWNER TO postgres;
	

	--
	-- Name: update_customer(bigint, text, text, text, text, text, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_customer(id_func bigint, first_name_func text, last_name_func text, address_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update customers set first_name = first_name_func, last_name = last_name_func,

	        address = address_func, phone_no = phone_no_func, credit_card_no = credit_card_no_func,

	        user_id = user_id_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_customer(id_func bigint, first_name_func text, last_name_func text, address_func text, phone_no_func text, credit_card_no_func text, user_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: update_flight(bigint, bigint, integer, integer, timestamp without time zone, timestamp without time zone, integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_flight(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update flights set airline_company_id = airline_company_id_func, origin_country_id = origin_country_id_func,

	        destination_country_id = destination_country_id_func, departure_time = departure_time_func,

	        landing_time = landing_time_func, remaining_tickets = remaining_tickets_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_flight(id_func bigint, airline_company_id_func bigint, origin_country_id_func integer, destination_country_id_func integer, departure_time_func timestamp without time zone, landing_time_func timestamp without time zone, remaining_tickets_func integer) OWNER TO postgres;
	

	--
	-- Name: update_ticket(bigint, bigint, bigint); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_ticket(id_func bigint, flight_id_func bigint, customer_id_func bigint)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update tickets set flight_id = flight_id_func, customer_id = customer_id_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_ticket(id_func bigint, flight_id_func bigint, customer_id_func bigint) OWNER TO postgres;
	

	--
	-- Name: update_user(bigint, text, text, text, integer); Type: PROCEDURE; Schema: public; Owner: postgres
	--
	

	CREATE PROCEDURE public.update_user(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer)
	    LANGUAGE plpgsql
	    AS $$

	    begin

	        update users set username = username_func, password = password_func, email = email_func,

	        role_id = role_id_func where id = id_func;

	    end;

	    $$;
	

	

	ALTER PROCEDURE public.update_user(id_func bigint, username_func text, password_func text, email_func text, role_id_func integer) OWNER TO postgres;
	

	SET default_tablespace = '';
	

	SET default_table_access_method = heap;
	

	--
	-- Name: administrators; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.administrators (
	    id integer NOT NULL,
	    first_name text,
	    last_name text,
	    level integer,
	    user_id bigint
	);
	

	

	ALTER TABLE public.administrators OWNER TO postgres;
	

	--
	-- Name: administrator_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.administrator_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.administrator_id_seq OWNER TO postgres;
	

	--
	-- Name: administrator_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.administrator_id_seq OWNED BY public.administrators.id;
	

	

	--
	-- Name: airline_companies; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.airline_companies (
	    id bigint NOT NULL,
	    name text,
	    country_id integer,
	    user_id bigint
	);
	

	

	ALTER TABLE public.airline_companies OWNER TO postgres;
	

	--
	-- Name: airline_companies_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.airline_companies_id_seq
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.airline_companies_id_seq OWNER TO postgres;
	

	--
	-- Name: airline_companies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.airline_companies_id_seq OWNED BY public.airline_companies.id;
	

	

	--
	-- Name: countries; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.countries (
	    id integer NOT NULL,
	    name text
	);
	

	

	ALTER TABLE public.countries OWNER TO postgres;
	

	--
	-- Name: countries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.countries_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.countries_id_seq OWNER TO postgres;
	

	--
	-- Name: countries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.countries_id_seq OWNED BY public.countries.id;
	

	

	--
	-- Name: customers; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.customers (
	    id bigint NOT NULL,
	    first_name text,
	    last_name text,
	    address text,
	    phone_no text,
	    credit_card_no text,
	    user_id bigint
	);
	

	

	ALTER TABLE public.customers OWNER TO postgres;
	

	--
	-- Name: customer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.customer_id_seq
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.customer_id_seq OWNER TO postgres;
	

	--
	-- Name: customer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.customer_id_seq OWNED BY public.customers.id;
	

	

	--
	-- Name: flights; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.flights (
	    id bigint NOT NULL,
	    airline_company_id bigint,
	    origin_country_id integer,
	    destination_country_id integer,
	    departure_time timestamp without time zone,
	    landing_time timestamp without time zone,
	    remaining_tickets integer
	);
	

	

	ALTER TABLE public.flights OWNER TO postgres;
	

	--
	-- Name: flights_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.flights_id_seq
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.flights_id_seq OWNER TO postgres;
	

	--
	-- Name: flights_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.flights_id_seq OWNED BY public.flights.id;
	

	

	--
	-- Name: tickets; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.tickets (
	    id bigint NOT NULL,
	    flight_id bigint,
	    customer_id bigint
	);
	

	

	ALTER TABLE public.tickets OWNER TO postgres;
	

	--
	-- Name: ticket_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.ticket_id_seq
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.ticket_id_seq OWNER TO postgres;
	

	--
	-- Name: ticket_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.ticket_id_seq OWNED BY public.tickets.id;
	

	

	--
	-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.user_roles (
	    id integer NOT NULL,
	    role_name text
	);
	

	

	ALTER TABLE public.user_roles OWNER TO postgres;
	

	--
	-- Name: user_roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.user_roles_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.user_roles_id_seq OWNER TO postgres;
	

	--
	-- Name: user_roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.user_roles_id_seq OWNED BY public.user_roles.id;
	

	

	--
	-- Name: users; Type: TABLE; Schema: public; Owner: postgres
	--
	

	CREATE TABLE public.users (
	    id bigint NOT NULL,
	    username text,
	    password text,
	    email text,
	    role_id integer
	);
	

	

	ALTER TABLE public.users OWNER TO postgres;
	

	--
	-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
	--
	

	CREATE SEQUENCE public.users_id_seq
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
	

	

	ALTER TABLE public.users_id_seq OWNER TO postgres;
	

	--
	-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
	--
	

	ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;
	

	

	--
	-- Name: administrators id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.administrators ALTER COLUMN id SET DEFAULT nextval('public.administrator_id_seq'::regclass);
	

	

	--
	-- Name: airline_companies id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.airline_companies ALTER COLUMN id SET DEFAULT nextval('public.airline_companies_id_seq'::regclass);
	

	

	--
	-- Name: countries id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.countries ALTER COLUMN id SET DEFAULT nextval('public.countries_id_seq'::regclass);
	

	

	--
	-- Name: customers id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.customers ALTER COLUMN id SET DEFAULT nextval('public.customer_id_seq'::regclass);
	

	

	--
	-- Name: flights id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.flights ALTER COLUMN id SET DEFAULT nextval('public.flights_id_seq'::regclass);
	

	

	--
	-- Name: tickets id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.tickets ALTER COLUMN id SET DEFAULT nextval('public.ticket_id_seq'::regclass);
	

	

	--
	-- Name: user_roles id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.user_roles ALTER COLUMN id SET DEFAULT nextval('public.user_roles_id_seq'::regclass);
	

	

	--
	-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);
	

	

	--
	-- Data for Name: administrators; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.administrators (id, first_name, last_name, level, user_id) FROM stdin;
	1	tomer	bibi	1	4
	3	bob	barker	2	2
	\.
	

	

	--
	-- Data for Name: airline_companies; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.airline_companies (id, name, country_id, user_id) FROM stdin;
	1	elal	1	5
	2	zolato	3	1
	\.
	

	

	--
	-- Data for Name: countries; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.countries (id, name) FROM stdin;
	1	israel
	2	brazil
	3	greenland
	4	thailand
	\.
	

	

	--
	-- Data for Name: customers; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.customers (id, first_name, last_name, address, phone_no, credit_card_no, user_id) FROM stdin;
	1	josh	povich	makabim 8	098342098	09832409820	1
	2	ted	mosby	gezer	987234924	298374928702	2
	3	barney	stinson	neit hashmonai 36	0923849023	09238409238	3
	\.
	

	

	--
	-- Data for Name: flights; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.flights (id, airline_company_id, origin_country_id, destination_country_id, departure_time, landing_time, remaining_tickets) FROM stdin;
	1	1	1	2	2021-01-20 04:05:06	2021-01-21 16:05:30	40
	2	2	1	3	2021-10-19 10:23:54	2021-10-19 23:57:52	27
	\.
	

	

	--
	-- Data for Name: tickets; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.tickets (id, flight_id, customer_id) FROM stdin;
	1	1	2
	2	2	2
	\.
	

	

	--
	-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.user_roles (id, role_name) FROM stdin;
	1	customer
	2	airline_company
	3	administrator
	\.
	

	

	--
	-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
	--
	

	COPY public.users (id, username, password, email, role_id) FROM stdin;
	1	doc	3456	doc3456@gmail.com	1
	2	jed mozly	6677	jedmozly@gmail.com	1
	3	barney	987	barney@gmail.com	1
	4	tomer	0	tomerbibi2002@gmail.com	3
	5	gg	pass	elal@gmail.cpm	2
	\.
	

	

	--
	-- Name: administrator_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.administrator_id_seq', 3, true);
	

	

	--
	-- Name: airline_companies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.airline_companies_id_seq', 2, true);
	

	

	--
	-- Name: countries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.countries_id_seq', 5, true);
	

	

	--
	-- Name: customer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.customer_id_seq', 3, true);
	

	

	--
	-- Name: flights_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.flights_id_seq', 2, true);
	

	

	--
	-- Name: ticket_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.ticket_id_seq', 2, true);
	

	

	--
	-- Name: user_roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.user_roles_id_seq', 3, true);
	

	

	--
	-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
	--
	

	SELECT pg_catalog.setval('public.users_id_seq', 5, true);
	

	

	--
	-- Name: administrators administrator_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.administrators
	    ADD CONSTRAINT administrator_pk PRIMARY KEY (id);
	

	

	--
	-- Name: airline_companies airline_companies_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.airline_companies
	    ADD CONSTRAINT airline_companies_pk PRIMARY KEY (id);
	

	

	--
	-- Name: countries countries_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.countries
	    ADD CONSTRAINT countries_pk PRIMARY KEY (id);
	

	

	--
	-- Name: customers customer_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customer_pk PRIMARY KEY (id);
	

	

	--
	-- Name: flights flights_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.flights
	    ADD CONSTRAINT flights_pk PRIMARY KEY (id);
	

	

	--
	-- Name: tickets ticket_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.tickets
	    ADD CONSTRAINT ticket_pk PRIMARY KEY (id);
	

	

	--
	-- Name: user_roles user_roles_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.user_roles
	    ADD CONSTRAINT user_roles_pk PRIMARY KEY (id);
	

	

	--
	-- Name: users users_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.users
	    ADD CONSTRAINT users_pk PRIMARY KEY (id);
	

	

	--
	-- Name: administrator_user_id_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX administrator_user_id_uindex ON public.administrators USING btree (user_id);
	

	

	--
	-- Name: airline_companies_name_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX airline_companies_name_uindex ON public.airline_companies USING btree (name);
	

	

	--
	-- Name: airline_companies_user_id_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX airline_companies_user_id_uindex ON public.airline_companies USING btree (user_id);
	

	

	--
	-- Name: countries_name_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX countries_name_uindex ON public.countries USING btree (name);
	

	

	--
	-- Name: customer_credit_card_no_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX customer_credit_card_no_uindex ON public.customers USING btree (credit_card_no);
	

	

	--
	-- Name: customer_phone_no_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX customer_phone_no_uindex ON public.customers USING btree (phone_no);
	

	

	--
	-- Name: customer_user_id_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX customer_user_id_uindex ON public.customers USING btree (user_id);
	

	

	--
	-- Name: ticket_flight_id_customer_id_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX ticket_flight_id_customer_id_uindex ON public.tickets USING btree (flight_id, customer_id);
	

	

	--
	-- Name: user_roles_role_name_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX user_roles_role_name_uindex ON public.user_roles USING btree (role_name);
	

	

	--
	-- Name: users_email_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX users_email_uindex ON public.users USING btree (email);
	

	

	--
	-- Name: users_username_uindex; Type: INDEX; Schema: public; Owner: postgres
	--
	

	CREATE UNIQUE INDEX users_username_uindex ON public.users USING btree (username);
	

	

	--
	-- Name: administrators administrator_users_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.administrators
	    ADD CONSTRAINT administrator_users_id_fk FOREIGN KEY (user_id) REFERENCES public.users(id);
	

	

	--
	-- Name: airline_companies airline_companies_countries_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.airline_companies
	    ADD CONSTRAINT airline_companies_countries_id_fk FOREIGN KEY (country_id) REFERENCES public.countries(id);
	

	

	--
	-- Name: airline_companies airline_companies_users_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.airline_companies
	    ADD CONSTRAINT airline_companies_users_id_fk FOREIGN KEY (user_id) REFERENCES public.users(id);
	

	

	--
	-- Name: customers customer_users_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.customers
	    ADD CONSTRAINT customer_users_id_fk FOREIGN KEY (user_id) REFERENCES public.users(id);
	

	

	--
	-- Name: flights flights_airline_companies_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.flights
	    ADD CONSTRAINT flights_airline_companies_id_fk FOREIGN KEY (airline_company_id) REFERENCES public.airline_companies(id);
	

	

	--
	-- Name: flights flights_countries_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.flights
	    ADD CONSTRAINT flights_countries_id_fk FOREIGN KEY (origin_country_id) REFERENCES public.countries(id);
	

	

	--
	-- Name: flights flights_countries_id_fk_2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.flights
	    ADD CONSTRAINT flights_countries_id_fk_2 FOREIGN KEY (destination_country_id) REFERENCES public.countries(id);
	

	

	--
	-- Name: tickets ticket_customer_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.tickets
	    ADD CONSTRAINT ticket_customer_id_fk FOREIGN KEY (customer_id) REFERENCES public.customers(id);
	

	

	--
	-- Name: tickets ticket_flights_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.tickets
	    ADD CONSTRAINT ticket_flights_id_fk FOREIGN KEY (flight_id) REFERENCES public.flights(id);
	

	

	--
	-- Name: users users_user_roles_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
	--
	

	ALTER TABLE ONLY public.users
	    ADD CONSTRAINT users_user_roles_id_fk FOREIGN KEY (role_id) REFERENCES public.user_roles(id);
	

	

	--
	-- PostgreSQL database dump complete
	--

